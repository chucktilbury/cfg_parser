# if test
define description "\n\ndescription:\n\n
If test make sure that the logic that drives the if/else feature\n
of the config file reader.\n\n
The test passes if there are only \"yes\" sections to be seen. If\n
there are any \"no\" sections seen then the test fails. There should\n
be 1 section defined and $(numtests) variables in the section.\n\n"

define numtests 6

# not equal values
define no-var1 "not equal 1"
define no-var2 "not equal 2"

# equal values
define yes-var1 "equal value"
define yes-var2 "equal value"

# first clause is true, others are false
if "$(yes-var1)" eq "$(yes-var2)" {
    yes-section {
        yes-var11 = some-value
    }
}
else "$(no-var1)" neq "$(no-var2)" {
    no-section {
        no-var11 = some-value
    }
}
else {
    no-section {
        no-var12 = some-value
    }
}

# Second clause is true, others are false.
if "$(no-var1)" eq "$(no-var2)" {
    no-section {
        no-var13 = some-value
    }
}
else "$(yes-var1)" eq "$(yes-var2)" {
    yes-section {
        yes-var12 = some-value
    }
}
else {
    no-section {
        no-var12 = some-value
    }
}

# Last else is used.
if "$(no-var1)" eq "$(no-var2)" {
    no-section {
        no-var13 = some-value
    }
}
else "$(no-var1)" eq "$(no-var2)" {
    no-section {
        no-var12 = some-value
    }
}
else {
    yes-section {
        yes-var13 = some-value
    }
}

# if clause has undefined test
if "$(yes-val1)" eq "$(undefined)" {
    no-section {
        no-var14 = some-value
    }
}

# if clause has defined var against an undefined var
if "$(yes-val1)" eq "$(no-val1)" {
    no-section {
        no-var15 = some-value
    }
}

define num-val 100

# see if numbers compare
if "100" EQ "$(num-val)" {
    yes-section {
        yes-var14 = some-value
    }
}

